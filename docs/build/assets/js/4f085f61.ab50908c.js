"use strict";(self.webpackChunkbig_bang=self.webpackChunkbig_bang||[]).push([[5272],{5724:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var t=a(7624),l=a(2172);const r={sidebar_label:"core",title:"yuhrao.feature-flag.core",toc_min_heading_level:2,toc_max_heading_level:4,custom_edit_url:null},i=void 0,s={id:"Components/feature-flag/api/yuhrao/feature-flag/core/index",title:"yuhrao.feature-flag.core",description:"client",source:"@site/docs/Components/feature-flag/api/yuhrao/feature-flag/core/index.md",sourceDirName:"Components/feature-flag/api/yuhrao/feature-flag/core",slug:"/Components/feature-flag/api/yuhrao/feature-flag/core/",permalink:"/big-bang/Components/feature-flag/api/yuhrao/feature-flag/core/",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{sidebar_label:"core",title:"yuhrao.feature-flag.core",toc_min_heading_level:2,toc_max_heading_level:4,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"string",permalink:"/big-bang/Components/data-cloak/api/yuhrao/data-cloak/string/"},next:{title:"client",permalink:"/big-bang/Components/feature-flag/api/yuhrao/feature-flag/unleash/client/"}},o={},c=[{value:"client",id:"client",level:3},{value:"enabled?",id:"enabled-QMARK-",level:3},{value:"variant",id:"variant",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.M)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"client",children:"client"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-clojure",children:"(client opts)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Create an unleash client. You can provide any option described in ",(0,t.jsx)(n.a,{href:"https://docs.getunleash.io/reference/sdks/java#configuration-options",children:"unleash doc"}),"\nKeep in mind that all keys must be kebab-case, all ",(0,t.jsx)(n.code,{children:"Map<I, K>"})," must be conventional clojure maps. Values for fields that require specific classes (e.g. CustomHttpHeadersProviderImpl)\nmust be provided via interop outside this function."]}),"\n",(0,t.jsx)(n.p,{children:"Fields with specific treatment:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["custom-http-headers: keys will be converted to camelCase strings. For each key, ",(0,t.jsx)(n.code,{children:".addCustomHttpHeader"})," will be called for the config builder"]}),"\n",(0,t.jsx)(n.li,{children:"sync-on-init?: will be used for builder.synchronousFetchOnInitialisation(boolean)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Unleash docs:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://docs.getunleash.io/reference/sdks/java#example-configurations",children:"Example Configuration"}),"\n",(0,t.jsx)("p",{children:(0,t.jsx)("sub",{children:(0,t.jsx)("a",{href:"https://github.com/yuhrao/big-bang/blob/main//src/yuhrao/feature_flag/core.clj#L6-L18",children:"Source"})})})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"enabled-QMARK-",children:"enabled?"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-clojure",children:"(enabled? client flag-name)\n(enabled? client flag-name context-map)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Get flag status. you can optionally send a context map.\nAll standard keys in context-map must be kebab-key. They'll be converte do camelCase internally"}),"\n",(0,t.jsx)(n.p,{children:"Unleash docs:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://docs.getunleash.io/reference/feature-toggles",children:"Feature Toggle"}),"\n",(0,t.jsx)("p",{children:(0,t.jsx)("sub",{children:(0,t.jsx)("a",{href:"https://github.com/yuhrao/big-bang/blob/main//src/yuhrao/feature_flag/core.clj#L20-L29",children:"Source"})})})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"variant",children:"variant"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-clojure",children:"(variant client flag-name)\n(variant client flag-name context-map)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Get flag variant. you can optionally send a context map.\nAll standard keys in context-map must be kebab-key. They'll be converte do camelCase internally"}),"\n",(0,t.jsx)(n.p,{children:"Unleash docs:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.getunleash.io/reference/feature-toggle-variants",children:"Feature Toggle Variants"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://docs.getunleash.io/reference/strategy-variants",children:"Strategy Variants"}),"\n",(0,t.jsx)("p",{children:(0,t.jsx)("sub",{children:(0,t.jsx)("a",{href:"https://github.com/yuhrao/big-bang/blob/main//src/yuhrao/feature_flag/core.clj#L31-L41",children:"Source"})})})]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,l.M)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},2172:(e,n,a)=>{a.d(n,{I:()=>s,M:()=>i});var t=a(1504);const l={},r=t.createContext(l);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);