"use strict";(self.webpackChunkbig_bang=self.webpackChunkbig_bang||[]).push([[4184],{528:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=s(7624),t=s(2172);const i={sidebar_position:0,custom_edit_url:"https://github.com/yuhrao/big-bang/tree/main/README.md"},o="Webserver",a={id:"Components/webserver/index",title:"Webserver",description:"Component for create WebServers",source:"@site/docs/Components/webserver/index.md",sourceDirName:"Components/webserver",slug:"/Components/webserver/",permalink:"/big-bang/Components/webserver/",draft:!1,unlisted:!1,editUrl:"https://github.com/yuhrao/big-bang/tree/main/README.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,custom_edit_url:"https://github.com/yuhrao/big-bang/tree/main/README.md"},sidebar:"tutorialSidebar",previous:{title:"yaml",permalink:"/big-bang/Components/serdes/api/yuhrao/serdes/formats/yaml/"},next:{title:"core",permalink:"/big-bang/Components/webserver/api/yuhrao/webserver/core/"}},d={},l=[{value:"Embeded features",id:"embeded-features",level:2},{value:"Server opts",id:"server-opts",level:2},{value:"Ring specific configs",id:"ring-specific-configs",level:3},{value:"Router",id:"router",level:3},{value:"Middlewares",id:"middlewares",level:3},{value:"Swagger &amp; Openapi 3",id:"swagger--openapi-3",level:3},{value:"Logs",id:"logs",level:3},{value:"Obscurers",id:"obscurers",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"webserver",children:"Webserver"}),"\n",(0,r.jsx)(n.p,{children:"Component for create WebServers"}),"\n",(0,r.jsx)(n.h2,{id:"embeded-features",children:"Embeded features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Swagger & Openapi docs"}),"\n",(0,r.jsx)(n.li,{children:"Serialization/Deserialization for most common content types"}),"\n",(0,r.jsx)(n.li,{children:"Request logging/tracing"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"server-opts",children:"Server opts"}),"\n",(0,r.jsx)(n.h3,{id:"ring-specific-configs",children:"Ring specific configs"}),"\n",(0,r.jsx)(n.p,{children:"You can pass the following configs for ring webserver"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:":port"}),": Server port"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:":host"}),": Server host (defaults to ",(0,r.jsx)(n.code,{children:"0.0.0.0"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:":join?"}),": decide whether to block the main thread or not (defaults to false)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"router",children:"Router"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts a ",(0,r.jsx)(n.code,{children:"reitit"})," route spec"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-clojure",children:'(require \'[br.dev.yuhri.webserver.core :as ws])\n\n(def routes [["/test"\n              ["" {:get {:handler (fn [req]\n                                    (t/is (match? uuid? (:trace-id req)))\n                                    {:status  :ok\n                                     :headers {:custom-header "true"}\n                                     :body    {:test true}})}}]\n              ["/validate/:id" {:get {:parameters {:body [:map\n                                                          [:name :string]]\n                                                   :path [:map\n                                                          [:id :int]]}\n                                      :handler    (fn [_req]\n\n                                                    {:status 200})}}]]])\n\n(ws/server {:routes routes\n            :port   80})\n'})}),"\n",(0,r.jsx)(n.h3,{id:"middlewares",children:"Middlewares"}),"\n",(0,r.jsxs)(n.p,{children:["Put your ",(0,r.jsx)(n.code,{children:"reitit"})," middlewares under the ",(0,r.jsx)(n.code,{children:":middlewares"})," key. They will be put ",(0,r.jsx)(n.strong,{children:"after all default middlewares"})]}),"\n",(0,r.jsx)(n.h3,{id:"swagger--openapi-3",children:"Swagger & Openapi 3"}),"\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:":openapi"})," map is present in opts, it enables Swagger 2 & Openapi 3 resources and swagger-ui."]}),"\n",(0,r.jsx)(n.p,{children:"Doc routes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/docs"}),": Swagger UI"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/openapi.json"}),": Openapi 3 specs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/swagger.json"}),": Swagger 2 specs"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-clojure",children:'(require \'[br.dev.yuhri.webserver.core :as ws])\n\n(def openapi {:info {:title       "My app"\n                     :version     "0.0.0"\n                     :description "My beautiful app"}})\n\n(def routes [["/test" {:get {:parameters {:body [:map\n                                                 [:name :string]]}\n                             :responses  {200 {:body [:map\n                                                      [:status :string]]}}\n\n                             :handler    (constantly {:status 200\n                                                      :body   {:status "healthy"}})}}]\n             ["/test/:id" {:get {:parameters {:body [:map\n                                                     [:name :string]]\n                                              :path [:map\n                                                     [:id :string]]}\n                                 :handler    (constantly {:status 200\n                                                          :body   {:status :healthy}})}}]])\n(def server-opts {:server-id :swagger-test\n                  :port      1234\n                  :openapi   openapi\n                  :routes    routes})\n\n(ws/server server-opts)\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"logs",children:"Logs"}),"\n",(0,r.jsxs)(n.p,{children:["Logs are enabled by default and it uses the ",(0,r.jsx)(n.code,{children:"logger"})," component internally. You can disable logs passing ",(0,r.jsx)(n.code,{children:":disable-logs?"})," to server options"]}),"\n",(0,r.jsxs)(n.p,{children:["Notice that you ",(0,r.jsx)(n.strong,{children:"must"})," start logger to be able to see logs being produced"]}),"\n",(0,r.jsx)(n.h3,{id:"obscurers",children:"Obscurers"}),"\n",(0,r.jsxs)(n.p,{children:["Obscurers are meant to handle sensitive data and protect them.\nYou can optionally pass a ",(0,r.jsx)(n.code,{children:":obscurer"})," key in a route spec to obscure response body and headers"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-clojure",children:'(require \'[br.dev.yuhri.webserver.core :as ws]\n         \'[br.dev.yuhri.data-cloak.core.string :as dc.string])\n\n(def routes [["/test/a" {:get {:obscurers {:body    {:email dc.string/email}\n                                           :headers {:x-custom dc.string/all}}\n                               :handler   (constantly {:status  :ok\n                                                       :headers {:x-custom "test"}\n                                                       :body    {:email "random-mail@gmail.com"}})}}]\n             \n             ["/test/b" {:get {:obscurers {:body    {:email dc.string/email}\n                                           :headers {:x-custom dc.string/all}}\n                               :handler   (constantly {:status :no-content})}}]])\n(def server-opts {:server-id :swagger-test\n                  :port      1234\n                  :routes    routes})\n\n(ws/server server-opts)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},2172:(e,n,s)=>{s.d(n,{I:()=>a,M:()=>o});var r=s(1504);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);